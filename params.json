{"google":"UA-32491479-1","name":"node-cache","body":"node-cache\r\n===========\r\n\r\n[![Build Status](https://secure.travis-ci.org/tcs-de/nodecache.png?branch=master)](http://travis-ci.org/tcs-de/nodecache)\r\n\r\n# Simple and fast NodeJS internal caching.\r\n\r\nA simple caching module that has `set`, `get` and `delete` methods and works a little bit like memcached.\r\nKeys can have a timeout after which they expire and are cleaned from the cache.  \r\nAll keys are stored in a single object so the practical limit is at around 1m keys.\r\n\r\n*Written in coffee-script*\r\n\r\n## Install\r\n\r\n<pre>\r\n  npm install node-cache\r\n</pre>\r\n\r\nOr just require the `node_cache.js` file to get the superclass\r\n\r\n## Examples:\r\n\r\n### Initialize:\r\n\r\n```\r\nvar NodeCache = require( \"node-cache\" );\r\nvar myCache = new NodeCache();\r\n```\r\n\r\n### Options\r\n\r\n- `stdTTL`: the standard ttl as number in seconds for every generated cache element. Default = 0 = unlimited\r\n- `checkperiod`: The period in seconds as number for the automatc delete check intervall. 0 = no periodic check \r\n\r\n```\r\nvar NodeCache = require( \"node-cache\" );\r\nvar myCacheOptions = new NodeCache( { stdTTL: 100, checkperiod: 120 } );\r\n```\r\n\r\n### Store a key (SET):\r\n\r\n`myCache.set( key, val, [ ttl ], callback )`\r\n\r\nSets a `key` `value` pair. It is possible to define a `ttl` (in seconds).  \r\nReturns `true` on success.\r\n\r\n```\r\nobj = { my: \"Special\", variable: 42 };\r\nmyCache.set( \"myKey\", obj, function( err, success ){\r\n  if( !err && success ){\r\n    console.log( success );\r\n    // true\r\n    // ... do something ...\r\n  }\r\n});\r\n```\r\n\r\n### Retrieve a key (GET):\r\n\r\n`myCache.get( key, callback )`\r\n\r\nGets a saved value from the cache.\r\nReturns an empty object `{}` if not found or expired.\r\nIf the value was found it returns an object with the `key` `value` pair.\r\n\r\n```\r\nmyCache.get( \"myKey\", function( err, value ){\r\n  if( !err ){\r\n    console.log( value );\r\n    // { \"myKey\": { my: \"Special\", variable: 42 } }\r\n    // ... do something ...\r\n  }\r\n});\r\n```\r\n\r\n### Retrieve multiple keys (GET):\r\n\r\n`myCache.get( [ key1, key2, ... ,keyn ], callback )`\r\n\r\nGets multiple saved values from the cache.\r\nReturns an empty object `{}` if not found or expired.\r\nIf the value was found it returns an object with the `key` `value` pair.\r\n\r\n```\r\nmyCache.get( [ \"myKeyA\", \"myKeyB\" ], function( err, value ){\r\n  if( !err ){\r\n    console.log( value );\r\n    /*\r\n      {\r\n        \"myKeyA\": { my: \"Special\", variable: 123 },\r\n        \"myKeyB\": { the: \"Glory\", answer: 42 }\r\n      }\r\n    */\r\n    // ... do something ...\r\n  }\r\n});\r\n```\r\n\r\n### Delete a key\r\n\r\n`myCache.del( key, callback )`\r\n\r\nDelete a key. Returns the number of deleted entries. A delete will never fail.\r\n\r\n```\r\nmyCache.del( \"myKey\", function( err, count ){\r\n  if( !err ){\r\n    console.log( count ); // 1\r\n    // ... do something ...\r\n  }\r\n});\r\n```\r\n\r\n### Delete multiple keys\r\n\r\n`myCache.del( [ key1, key2, ... ,keyn ], callback )`\r\n\r\nDelete multiple keys. Returns the number of deleted entries. A delete will never fail.\r\n\r\n```\r\nmyCache.del( [ \"myKeyA\", \"myKeyB\" ], function( err, count ){\r\n  if( !err ){\r\n    console.log( count ); // 2\r\n    // ... do something ...\r\n  }\r\n});\r\n```\r\n\r\n### Change TTL\r\n\r\n`myCache.ttl( key, ttl, callback )`\r\n\r\nRedefine the ttl of a key. Returns true if the key has been found and changed. Otherwise returns false.  \r\nIf the ttl-argument isnt passed the default-TTL will be used.\r\n\r\n```\r\nmyCache = new NodeCache( { stdTTL: 100 } )\r\nmyCache.ttl( \"existendKey\", 100, function( err, changed ){\r\n  if( !err ){\r\n    console.log( changed ); // true\r\n    // ... do something ...\r\n  }\r\n});\r\n\r\nmyCache.ttl( \"missingKey\", 100, function( err, changed ){\r\n  if( !err ){\r\n    console.log( changed ); // false\r\n    // ... do something ...\r\n  }\r\n});\r\n\r\nmyCache.ttl( \"existendKey\", function( err, changed ){\r\n  if( !err ){\r\n    console.log( changed ); // true\r\n    // ... do something ...\r\n  }\r\n});\r\n```\r\n\r\n### Statistics\r\n\r\n`myCache.getStats()`\r\n\r\nReturns the statistics.  \r\n\r\n```\r\nmyCache.getStats();\r\n  /*\r\n    {\r\n      keys: 0,    // global key count\r\n      hits: 0,    // global hit count\r\n      misses: 0,  // global miss count\r\n      ksize: 0,   // global key size count\r\n      vsize: 0    // global value size count\r\n    }\r\n  */\r\n```\r\n\r\n### Flush all data\r\n\r\n`myCache.flushAll()`\r\n\r\nFlush all data.  \r\n\r\n```\r\nmyCache.flushAll();\r\nmyCache.getStats();\r\n  /*\r\n    {\r\n      keys: 0,    // global key count\r\n      hits: 0,    // global hit count\r\n      misses: 0,  // global miss count\r\n      ksize: 0,   // global key size count\r\n      vsize: 0    // global value size count\r\n    }\r\n  */\r\n```\r\n\r\n## Work in progress\r\n\r\n`nodecache` is work in progress. Your ideas, suggestions etc. are very welcome.\r\n\r\n## License \r\n\r\n(The MIT License)\r\n\r\nCopyright (c) 2010 TCS &lt;dev (at) tcs.de&gt;\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n'Software'), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","tagline":"a simple in memory node internal caching module","note":"Don't delete this file! It's used internally to help with page regeneration."}